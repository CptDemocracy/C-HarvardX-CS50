PROBLEM SPECIFICATION:

Vigenère’s cipher improves upon Caesar’s by encrypting messages using a keyword. If p is plaintext 
and k is a keyword (i.e., an alphbetical string, whereby A and a represent 0, while Z and z represent 25), 
then each letter, ci, in the ciphertext, c, is computed as:

ci = (pi + kj) % 26

If k is shorter than p, then the letters in k must be reused cyclically as many times as it takes to encrypt p.

For this problem I was required to write, in vigenere.c, a program that encrypts messages using Vigenère’s cipher. This program 
must accept a single command-line argument: a keyword, k, composed entirely of alphabetical characters. If the program is executed
without any command-line arguments, with more than one command-line argument, or with one command-line argument that contains any 
non-alphabetical character, the program should inform the user of the input error and exit immediately. 

Otherwise, the program must proceed to prompt the user for a string of plaintext, p, which it must then encrypt according to 
Vigenère’s cipher with k, ultimately printing the result and exiting.

As for the characters in k, we must treat A and a as 0, B and b as 1, … , and Z and z as 25. In addition, the program must only 
apply Vigenère’s cipher to a character in p if that character is a letter. All other characters (numbers, symbols, spaces, punctuation 
marks, etc.) must be outputted unchanged. Moreover, if the program is to apply the jth character of k to the ith character of p, 
but the latter proves to be a non-alphabetical character, we must wait to apply that jth character of k to the next alphabetical 
character in p; we must not yet advance to the next character in k. Finally, the program must preserve the case of each letter in p.
